// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TopupStatus {
  PENDING
  PAID
  CANCEL
}

model User {
  id             Int       @id @default(autoincrement())
  Email          String    @unique
  Password       String    @db.VarChar(72)
  Displayname    String    @map("display_name")
  Phone          String?
  CreatedDate    DateTime  @default(now()) @map("created_date")
  ProfilePicture String    @default("https://upload.wikimedia.org/wikipedia/commons/thumb/b/bc/Unknown_person.jpg/434px-Unknown_person.jpg") @map("Profile_picture")
  Wallet         Int       @default(0)
  Backend        Int       @default(0)
  Cart           Cart[]
  Topup          Topup[]
  History        History[]
  Order          Order[]
}

model Topup {
  id     Int         @id @default(autoincrement())
  Amount Int         @default(0)
  Status TopupStatus @default(PENDING)
  user   User        @relation(fields: [UserID], references: [id], onUpdate: Cascade)
  UserID Int
}

model Product {
  id          Int       @id @default(autoincrement())
  Name        String
  Description String?
  PublishDate DateTime  @db.Date()
  Author      String
  Price       Int       @default(0)
  Tag         String?
  ImageUrl    String    @map("Image_URL")
  DownloadUrl String    @map("Download_URL")
  Cart        Cart[]
  History     History[]
  Order       Order[]

  @@fulltext([Name, Description, Author])
}

model History {
  id         Int     @id @default(autoincrement())
  PaidAmount Int
  user       User    @relation(fields: [UserID], references: [id], onUpdate: Cascade)
  UserID     Int
  product    Product @relation(fields: [ProductID], references: [id])
  ProductID  Int
}

model Cart {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [UserID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserID    Int
  product   Product @relation(fields: [ProductID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ProductID Int
  Order     Order?
  paid      Int     @default(0)
}

model Order {
  id        Int      @id @default(autoincrement())
  CreateAt  DateTime @default(now()) @map("Create_at")
  UpdateAt  DateTime @updatedAt()
  cart      Cart     @relation(fields: [CartID], references: [id])
  CartID    Int      @unique
  product   Product  @relation(fields: [ProductID], references: [id])
  ProductID Int
  user      User     @relation(fields: [UserID], references: [id], onUpdate: Cascade)
  UserID    Int
}

// enum PERMISSION {
//   ADMIN
//   EDITOR
// }

// model Employees {
//   id         Int        @id @default(autoincrement())
//   Username   String     @unique
//   Password   String
//   Permission PERMISSION @default(EDITOR)
// }
